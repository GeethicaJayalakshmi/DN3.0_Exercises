1. Understand the Problem
Q.Why Data Structures and Algorithms Are Essential in Handling Large Inventories

The Recursive Solution's Optimisation:
Memorisation: Memorisation can be employed in recursive algorithms to prevent duplicate computations. Memorisation is the process of saving the outputs of costly function calls and using them again when the identical inputs are received.
2. Iterative Approach: Performance can be increased and the expense of recursive calls can be avoided by converting the recursive solution to an iterative one.

Q.Discuss the types of data structures suitable for this problem.

The following data structure types are appropriate for this problem:
1.ArrayList: Offers dynamic array functionality for quick and simple scaling as well as effective random access.
2.HashMap: Perfect for inventory management, it provides constant time complexity for insertion, deletion, and look-up operations.
3. TreeMap: Enables effective range searches and ordered operations while maintaining the sorted order of keys.

4. Analysis

Q.Analyze the time complexity of each operation (add, update, delete) in your chosen data structure.
=>Time Complexity of Each Operation
1.Add Product: O(1) - Insertion in a HashMap is generally constant time.
2.Update Product: O(1) - Updating a value in a HashMap is also constant time.
3.Delete Product: O(1) - Removing an entry from a HashMap is constant time.

Q.Discuss how you can optimize these operations.

=> Enhancing Performance
1.Batch Processing: To cut down on the overhead of numerous separate activities, think about batch processing for bulk inserts or updates.
2. Concurrency: If the inventory management system must manage several threads reading and writing at the same time, use concurrent data structures like ConcurrentHashMap.
3. Indexing: To enable quicker lookups, think about implementing indexing techniques or additional data structures if search operations on non-key attributes (like productName) start to happen frequently.
