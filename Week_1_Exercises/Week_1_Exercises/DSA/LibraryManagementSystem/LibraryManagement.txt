1. Understand Search Algorithms

Q.Explain linear search and binary search algorithms?

Linear Search
A simple technique known as "linear search" iteratively examines each element in a list until the desired element is located or the list is exhausted.
Complexity of Time:
In the best scenario, O(1) (if it is the first element)
Mean Situation: O(n)
The worst case is O(n).

Binary Search Description: Operating on sorted lists, binary search is an algorithm that is more efficient. The search interval is repeatedly divided in half. The target value is then compared to the interval's middle element, and the search range is modified accordingly.
Complexity of Time:
Best Case: O(1) (assuming the centre element)
Mean Situation: O(log n)
Odds of Success: O(log n)

4. Analysis

Q.Compare the time complexity of linear and binary search ?

Best Case for linear search is O(1) (if the element is the first one).
Case Average: O(n) Case Worst: O(n)
Binary Search: O(1) in the best case (if the element is in the middle)
Mean Situation: O(log n)
Odds of Success: O(log n)

Q.Discuss when to use each algorithm based on the data set size and order?

1. Fit for small or unsorted datasets is linear search.
2. Easy to implement and doesn't need any sorting of the data.
3. Useful when the advantages of speedier searches are outweighed by the expense of data sorting.
1. Binary search is appropriate for sizable, sorted databases.
2. Requires the data to be sorted initially, which can take some time but makes subsequent searches considerably faster.
3. Ideal for numerous searches on a static dataset since sorting overhead is spread out over a number of search operations.
